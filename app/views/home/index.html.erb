<% content_for :inline_styles do %>
<style>
    html,
    body,
    #game-container {
      margin: 0;
      padding: 0;
    }
    #game-container {
      min-width: 100vw;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    #game-container>canvas {
      border-radius: 5px;
    }
</style>
<% end %>

<% content_for :inline_scripts do %>
<script>
  const config = {
    type: Phaser.AUTO, // Which renderer to use
    width: 1024, // Canvas width in pixels
    height: 768, // Canvas height in pixels
    parent: "game-container", // ID of the DOM element to add the canvas to
    scene: {
      preload: preload,
      create: create,
      update: update
    },
    physics: {
      default: "arcade",
      debug: true,
      arcade: {
        gravity: { y: 0 } // Top down game, so no gravity
      }
    }
  };

  const game = new Phaser.Game(config);
  let cursors;
  let player;

  function preload() {
    this.load.image("tiles", "<%= url_for(@tilemap.tileset) %>");
    this.load.tilemapTiledJSON("town", "<%= url_for(@tilemap.tilemap_data) %>");
    this.load.atlas("player", "/player1.png", "/player1.json");
  }

  function create() {
    var map = this.make.tilemap({ key: "town" });
    const tileset = map.addTilesetImage("tileset", "tiles");

    const belowLayer = map.createStaticLayer("below", tileset, 0, 0);
    const worldLayer = map.createStaticLayer("world", tileset, 0, 0);
    const aboveLayer = map.createStaticLayer("above", tileset, 0, 0);
    aboveLayer.setDepth(10);

    player = this.physics.add
      .sprite(400, 350, "player", "misa-front")
      .setSize(30, 40)
      .setOffset(0, 24);

    this.physics.add.collider(player, worldLayer);

    worldLayer.setCollisionByProperty({ collides: true });

    cursors = this.input.keyboard.createCursorKeys();

    const anims = this.anims;
    anims.create({
      key: "misa-left-walk",
      frames: anims.generateFrameNames("player", { prefix: "misa-left-walk.", start: 0, end: 3, zeroPad: 3 }),
      frameRate: 10,
      repeat: -1
    });
    anims.create({
      key: "misa-right-walk",
      frames: anims.generateFrameNames("player", { prefix: "misa-right-walk.", start: 0, end: 3, zeroPad: 3 }),
      frameRate: 10,
      repeat: -1
    });
    anims.create({
      key: "misa-front-walk",
      frames: anims.generateFrameNames("player", { prefix: "misa-front-walk.", start: 0, end: 3, zeroPad: 3 }),
      frameRate: 10,
      repeat: -1
    });
    anims.create({
      key: "misa-back-walk",
      frames: anims.generateFrameNames("player", { prefix: "misa-back-walk.", start: 0, end: 3, zeroPad: 3 }),
      frameRate: 10,
      repeat: -1
    });

    const camera = this.cameras.main;
    camera.startFollow(player);
    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);

    for(let y=0;y<map.height; y++){
      for(let x=0;x<map.width; x++){
        let tile = worldLayer.getTileAt(x, y);
        if (tile) {
          console.log(tile);
        }
      }
    }

    this.input.keyboard.once("keydown_D", event => {
      this.physics.world.createDebugGraphic();
      const graphics = this.add.graphics().setAlpha(0.75).setDepth(20);
      worldLayer.renderDebug(graphics, {
        tileColor: null,
        collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255),
        faceColor: new Phaser.Display.Color(40, 39, 37, 255)
      });
    });
  }

  function update(time, delta) {
    const speed = 175;
    const prevVelocity = player.body.velocity.clone();

    // Stop any previous movement from the last frame
    player.body.setVelocity(0);

    // Horizontal movement
    if (cursors.left.isDown) {
      player.body.setVelocityX(-speed);
    } else if (cursors.right.isDown) {
      player.body.setVelocityX(speed);
    }

    // Vertical movement
    if (cursors.up.isDown) {
      player.body.setVelocityY(-speed);
    } else if (cursors.down.isDown) {
      player.body.setVelocityY(speed);
    }

    // Normalize and scale the velocity so that player can't move faster along a diagonal
    player.body.velocity.normalize().scale(speed);

    // Update the animation last and give left/right animations precedence over up/down animations
    if (cursors.left.isDown) {
      player.anims.play("misa-left-walk", true);
    } else if (cursors.right.isDown) {
      player.anims.play("misa-right-walk", true);
    } else if (cursors.up.isDown) {
      player.anims.play("misa-back-walk", true);
    } else if (cursors.down.isDown) {
      player.anims.play("misa-front-walk", true);
    } else {
      player.anims.stop();

      // If we were moving, pick and idle frame to use
      if (prevVelocity.x < 0) player.setTexture("player", "misa-left");
      else if (prevVelocity.x > 0) player.setTexture("player", "misa-right");
      else if (prevVelocity.y < 0) player.setTexture("player", "misa-back");
      else if (prevVelocity.y > 0) player.setTexture("player", "misa-front");
    }
  }
</script>
<% end %>

<div id="game-container"></div>
